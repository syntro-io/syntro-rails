class AssignmentPdf < Prawn::Document
  include AssignmentsHelper

  def initialize(assignment, view)
    super({ page_layout: :landscape })
    @assignment = assignment
    @view = view
    stroke_color 'e00000'
    assignment_title_page
    assignment_plan_page
    print_test_plan_results
    print_issues
  end

  def assignment_title_page
    move_down 250
    text "Assignment: #{@assignment.product.name}", size: 25, style: :bold
    if @assignment.test_plan.present?
      text @assignment.test_plan.name.to_s, size: 15
    else
      text @assignment.stencil.name.to_s, size: 15
    end
    move_down 20
    text "Version: #{@assignment.version.version}"
    move_cursor_to 10
    text 'Generated by TestCaseDB', size: 9
  end

  def print_test_plan_results
    if @assignment.test_plan.present?
      test_plans << @assignment.test_plan
    else
      first = true
      line_color = stroke_color
      @assignment.stencil.stencil_test_plans.each do |stencil_test_plan|
        if !first
          start_new_page
        else
          first = false
        end
        text "<b>Test Plan: </b>#{stencil_test_plan.test_plan.name}", inline_format: true
        stroke_horizontal_rule
        move_down 10
        cases = [%w(Name Category Version Description Result Date)] +
                @assignment.results.select { |result| result.test_case.plan_cases.select { |plan_case| plan_case.test_plan_id == stencil_test_plan.test_plan.id }.present? }.sort.map do |result|
                  time = result.executed_at.blank? ? '' : result.executed_at.strftime('%F %T')
                  [result.test_case.name, @view.CategoryPathName(result.test_case.category_id), result.test_case.version, result.test_case.description, result.result, time]
                end
        table cases do
          row(0).font_style = :bold
          self.row_colors = %w(EEEEEE FFFFFF)
          self.header = true
          self.column_widths = { 0 => 150, 2 => 60, 4 => 60 }
          self.width = cells.max_width / 3.4
        end
        move_down 20
        @assignment.results.select { |result| result.test_case.plan_cases.select { |plan_case| plan_case.test_plan_id == stencil_test_plan.test_plan.id }.present? && result.result != 'Passed' }.sort.map do |result|
          text "<b>Test Case:</b> #{result.test_case.name}", size: 12, inline_format: true
          text "<b>Category:</b> #{@view.CategoryPathName(result.test_case.category_id)}", size: 12, inline_format: true
          text "<b>Version:</b> #{result.test_case.version}", inline_format: true
          text "<b>Description:</b> #{result.test_case.description}", inline_format: true
          move_down 5
          if result.result == 'Passed'
            fill_color '00AA000'
          elsif result.result == 'Failed'
            fill_color 'AA0000'
          else
            fill_color 'E8A317'
          end
          text "<b>Result:</b> #{result.result}", inline_format: true
          fill_color '0000000'
          text "<b>Note:</b> #{result.note}", inline_format: true
          move_down 10
          stroke_color '440099'
          stroke_horizontal_rule
          stroke_color line_color
          move_down 20
        end
      end
    end
  end

  def assignment_plan_page
    start_new_page
    if @assignment.test_plan.present?
      text "<b>Test Plan:</b> #{@assignment.test_plan.name}", inline_format: true
    else
      text "<b>Stencil:</b> #{@assignment.stencil.name}", inline_format: true
      text '<b>Test plan(s):</b>', inline_format: true
      @assignment.stencil.stencil_test_plans.each do |stencil_test_plan|
        text "#{stencil_test_plan.test_plan.name} on #{stencil_test_plan.device.name}", size: 15, indent_paragraphs: 20
      end
    end
    text "<b>Notes</b>: #{@assignment.notes}", inline_format: true
    text "<b>Version:</b> #{@assignment.version.version}", inline_format: true
    text "<b>Product:</b> #{@assignment.product.name}", inline_format: true
    move_down 20
    text 'Test Cases', style: :bold, size: 15
    stroke_horizontal_rule
    move_down 10
  end

  def print_issues
    issues = issues_list(@assignment)
    if issues.any?
      start_new_page
      text 'Issues', size: 15, style: :bold
      stroke_horizontal_rule
      stroke_color '000000'
      move_down 10
      issues.each do |issue|
        text "<b>Issue:</b> #{issue[0]}", size: 12, inline_format: true
        text "<b>Name:</b> #{issue[1][:name]}", size: 12, inline_format: true
        text "<b>Status:</b> #{issue[1][:status]}", size: 12, inline_format: true
        move_down 5
      end
      move_down 5
      stroke_horizontal_rule
      move_down 20
    end
  end

  def print_test_cases_results
    start_new_page
    @assignment.results.order.map do |result|
      text "<b>Test Case:</b> #{result.test_case.name}", size: 12, inline_format: true
      text "<b>Category:</b> #{@view.CategoryPathName(result.test_case.category_id)}", size: 12, inline_format: true
      text "<b>Version:</b> #{result.test_case.version}", inline_format: true
      text "<b>Description:</b> #{result.test_case.description}", inline_format: true
      move_down 5
      if result.result == 'Passed'
        fill_color '00AA000'
      elsif result.result == 'Failed'
        fill_color 'AA0000'
      else
        fill_color 'E8A317'
      end
      text "<b>Result:</b> #{result.result}", inline_format: true, color: 'green'
      fill_color '0000000'
      text "<b>Note:</b> #{result.note}", inline_format: true
      move_down 10
      stroke_horizontal_rule
      move_down 20
    end
  end
end
